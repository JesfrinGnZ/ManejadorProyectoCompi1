
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package recuperacionPaginas;

import java_cup.runtime.*;
import elementos.*;
import Objetos.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\006" +
    "\000\002\003\006\000\002\012\006\000\002\004\012\000" +
    "\002\005\012\000\002\006\012\000\002\007\012\000\002" +
    "\010\012\000\002\013\004\000\002\013\003\000\002\014" +
    "\017\000\002\014\017\000\002\014\017\000\002\014\017" +
    "\000\002\014\017\000\002\014\017\000\002\014\017\000" +
    "\002\014\017\000\002\014\017\000\002\014\017\000\002" +
    "\014\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\016\012" +
    "\000\002\017\004\000\002\017\003\000\002\020\011\000" +
    "\002\011\012\000\002\021\004\000\002\021\003\000\002" +
    "\022\017\000\002\022\017\000\002\022\017\000\002\022" +
    "\017\000\002\022\017\000\002\022\017\000\002\022\017" +
    "\000\002\022\017\000\002\022\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\004\045\007\001\002\000\006\002\uffff\045" +
    "\uffff\001\002\000\004\045\016\001\002\000\004\045\016" +
    "\001\002\000\004\004\321\001\002\000\004\045\016\001" +
    "\002\000\004\045\016\001\002\000\006\002\014\045\007" +
    "\001\002\000\006\002\000\045\000\001\002\000\004\002" +
    "\001\001\002\000\004\045\163\001\002\000\004\006\017" +
    "\001\002\000\004\046\020\001\002\000\006\003\022\045" +
    "\023\001\002\000\006\003\ufff3\045\ufff3\001\002\000\006" +
    "\003\uffe8\045\uffe8\001\002\000\004\007\030\001\002\000" +
    "\006\003\022\045\026\001\002\000\006\003\ufff4\045\ufff4" +
    "\001\002\000\006\007\030\044\027\001\002\000\004\006" +
    "\161\001\002\000\004\005\031\001\002\000\004\061\032" +
    "\001\002\000\004\062\033\001\002\000\026\013\043\016" +
    "\040\023\035\024\036\027\037\030\042\054\034\055\044" +
    "\056\041\057\045\001\002\000\004\062\152\001\002\000" +
    "\004\062\143\001\002\000\004\062\134\001\002\000\004" +
    "\062\125\001\002\000\004\062\116\001\002\000\004\062" +
    "\107\001\002\000\004\062\073\001\002\000\004\062\064" +
    "\001\002\000\004\062\055\001\002\000\004\062\046\001" +
    "\002\000\004\046\047\001\002\000\004\047\050\001\002" +
    "\000\004\045\051\001\002\000\004\044\052\001\002\000" +
    "\004\007\053\001\002\000\004\046\054\001\002\000\006" +
    "\003\uffee\045\uffee\001\002\000\004\046\056\001\002\000" +
    "\004\060\057\001\002\000\004\045\060\001\002\000\004" +
    "\044\061\001\002\000\004\007\062\001\002\000\004\046" +
    "\063\001\002\000\006\003\ufff0\045\ufff0\001\002\000\004" +
    "\046\065\001\002\000\004\047\066\001\002\000\004\045" +
    "\067\001\002\000\004\044\070\001\002\000\004\007\071" +
    "\001\002\000\004\046\072\001\002\000\006\003\ufff2\045" +
    "\ufff2\001\002\000\004\046\074\001\002\000\014\015\076" +
    "\017\102\020\100\021\101\022\077\001\002\000\004\045" +
    "\103\001\002\000\004\045\uffe7\001\002\000\004\045\uffe3" +
    "\001\002\000\004\045\uffe5\001\002\000\004\045\uffe4\001" +
    "\002\000\004\045\uffe6\001\002\000\004\044\104\001\002" +
    "\000\004\007\105\001\002\000\004\046\106\001\002\000" +
    "\006\003\uffe9\045\uffe9\001\002\000\004\046\110\001\002" +
    "\000\004\060\111\001\002\000\004\045\112\001\002\000" +
    "\004\044\113\001\002\000\004\007\114\001\002\000\004" +
    "\046\115\001\002\000\006\003\uffef\045\uffef\001\002\000" +
    "\004\046\117\001\002\000\004\053\120\001\002\000\004" +
    "\045\121\001\002\000\004\044\122\001\002\000\004\007" +
    "\123\001\002\000\004\046\124\001\002\000\006\003\uffed" +
    "\045\uffed\001\002\000\004\046\126\001\002\000\004\047" +
    "\127\001\002\000\004\045\130\001\002\000\004\044\131" +
    "\001\002\000\004\007\132\001\002\000\004\046\133\001" +
    "\002\000\006\003\uffea\045\uffea\001\002\000\004\046\135" +
    "\001\002\000\004\047\136\001\002\000\004\045\137\001" +
    "\002\000\004\044\140\001\002\000\004\007\141\001\002" +
    "\000\004\046\142\001\002\000\006\003\uffeb\045\uffeb\001" +
    "\002\000\004\046\144\001\002\000\004\047\145\001\002" +
    "\000\004\045\146\001\002\000\004\044\147\001\002\000" +
    "\004\007\150\001\002\000\004\046\151\001\002\000\006" +
    "\003\uffec\045\uffec\001\002\000\004\046\153\001\002\000" +
    "\004\047\154\001\002\000\004\045\155\001\002\000\004" +
    "\044\156\001\002\000\004\007\157\001\002\000\004\046" +
    "\160\001\002\000\006\003\ufff1\045\ufff1\001\002\000\004" +
    "\046\162\001\002\000\004\045\ufff5\001\002\000\004\044" +
    "\165\001\002\000\006\002\ufffe\045\ufffe\001\002\000\004" +
    "\004\166\001\002\000\004\046\167\001\002\000\006\002" +
    "\ufffa\045\ufffa\001\002\000\004\045\172\001\002\000\004" +
    "\045\163\001\002\000\004\063\173\001\002\000\004\046" +
    "\174\001\002\000\006\003\176\045\177\001\002\000\006" +
    "\003\uffdc\045\uffdc\001\002\000\006\003\uffd3\045\uffd3\001" +
    "\002\000\004\064\204\001\002\000\006\003\176\045\202" +
    "\001\002\000\006\003\uffdd\045\uffdd\001\002\000\006\044" +
    "\203\064\204\001\002\000\004\063\316\001\002\000\004" +
    "\005\205\001\002\000\004\061\206\001\002\000\004\062" +
    "\207\001\002\000\022\024\217\031\210\032\212\033\213" +
    "\034\216\035\215\036\214\043\211\001\002\000\004\062" +
    "\307\001\002\000\004\062\300\001\002\000\004\062\265" +
    "\001\002\000\004\062\256\001\002\000\004\062\245\001" +
    "\002\000\004\062\236\001\002\000\004\062\227\001\002" +
    "\000\004\062\220\001\002\000\004\046\221\001\002\000" +
    "\004\047\222\001\002\000\004\045\223\001\002\000\004" +
    "\044\224\001\002\000\004\064\225\001\002\000\004\046" +
    "\226\001\002\000\006\003\uffd5\045\uffd5\001\002\000\004" +
    "\046\230\001\002\000\004\050\231\001\002\000\004\045" +
    "\232\001\002\000\004\044\233\001\002\000\004\064\234" +
    "\001\002\000\004\046\235\001\002\000\006\003\uffd7\045" +
    "\uffd7\001\002\000\004\046\237\001\002\000\004\050\240" +
    "\001\002\000\004\045\241\001\002\000\004\044\242\001" +
    "\002\000\004\064\243\001\002\000\004\046\244\001\002" +
    "\000\006\003\uffd6\045\uffd6\001\002\000\004\046\246\001" +
    "\002\000\006\047\251\051\250\001\002\000\004\045\252" +
    "\001\002\000\004\045\uffcd\001\002\000\004\045\uffce\001" +
    "\002\000\004\044\253\001\002\000\004\064\254\001\002" +
    "\000\004\046\255\001\002\000\006\003\uffd4\045\uffd4\001" +
    "\002\000\004\046\257\001\002\000\004\052\260\001\002" +
    "\000\004\045\261\001\002\000\004\044\262\001\002\000" +
    "\004\064\263\001\002\000\004\046\264\001\002\000\006" +
    "\003\uffd8\045\uffd8\001\002\000\004\046\266\001\002\000" +
    "\012\037\270\040\271\041\267\042\272\001\002\000\004" +
    "\045\uffd0\001\002\000\004\045\uffd2\001\002\000\004\045" +
    "\uffd1\001\002\000\004\045\uffcf\001\002\000\004\045\274" +
    "\001\002\000\004\044\275\001\002\000\004\064\276\001" +
    "\002\000\004\046\277\001\002\000\006\003\uffda\045\uffda" +
    "\001\002\000\004\046\301\001\002\000\004\053\302\001" +
    "\002\000\004\045\303\001\002\000\004\044\304\001\002" +
    "\000\004\064\305\001\002\000\004\046\306\001\002\000" +
    "\006\003\uffd9\045\uffd9\001\002\000\004\046\310\001\002" +
    "\000\004\053\311\001\002\000\004\045\312\001\002\000" +
    "\004\044\313\001\002\000\004\064\314\001\002\000\004" +
    "\046\315\001\002\000\006\003\uffdb\045\uffdb\001\002\000" +
    "\004\046\317\001\002\000\004\045\uffde\001\002\000\006" +
    "\002\ufffb\045\ufffb\001\002\000\004\005\322\001\002\000" +
    "\004\061\323\001\002\000\004\062\324\001\002\000\012" +
    "\012\326\014\327\025\330\026\325\001\002\000\004\062" +
    "\337\001\002\000\004\062\335\001\002\000\004\062\333" +
    "\001\002\000\004\062\331\001\002\000\004\046\332\001" +
    "\002\000\004\045\ufff7\001\002\000\004\046\334\001\002" +
    "\000\004\045\ufff8\001\002\000\004\046\336\001\002\000" +
    "\004\045\ufff9\001\002\000\004\046\340\001\002\000\004" +
    "\045\ufff6\001\002\000\004\045\163\001\002\000\006\002" +
    "\ufffd\045\ufffd\001\002\000\004\045\344\001\002\000\004" +
    "\065\347\001\002\000\004\045\163\001\002\000\006\002" +
    "\ufffc\045\ufffc\001\002\000\004\046\350\001\002\000\004" +
    "\045\351\001\002\000\004\010\357\001\002\000\004\045" +
    "\354\001\002\000\004\045\uffe0\001\002\000\006\010\357" +
    "\044\356\001\002\000\004\045\uffe1\001\002\000\004\065" +
    "\365\001\002\000\004\011\360\001\002\000\004\061\361" +
    "\001\002\000\004\047\362\001\002\000\004\044\363\001" +
    "\002\000\004\046\364\001\002\000\004\045\uffdf\001\002" +
    "\000\004\046\366\001\002\000\004\045\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\364\000\016\002\011\003\003\004\010\005\005\006" +
    "\004\007\007\001\001\000\002\001\001\000\004\010\342" +
    "\001\001\000\004\010\340\001\001\000\002\001\001\000" +
    "\004\010\167\001\001\000\004\010\014\001\001\000\014" +
    "\003\012\004\010\005\005\006\004\007\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\023\014" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\170\001\001\000\004\012\317" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\177\022\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\272\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\341\001" +
    "\001\000\002\001\001\000\004\016\344\001\001\000\002" +
    "\001\001\000\004\012\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\351\020\352\001\001\000\002" +
    "\001\001\000\004\020\354\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    int fila,columna;
    String lexema;
    //  VARIABLES
    ArrayList<Token> listaDeTokens;
    ArrayList<String> listaDeEtiquetas;
    ArrayList<Token> listaDeAtributos;
    // Connect this parser to a scanner!
    public parser(AnalizadorLexicoPaginas lex) {
	super(lex);
        listaDeTokens=new ArrayList<>();
        listaDeEtiquetas= new ArrayList<>();
        listaDeAtributos = new ArrayList<>();
    }

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s){        
        try {
        this.lexema =s.value.toString();
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;
        System.out.println("ERROR"+lexema+" "+fila+" "+columna);
        } catch (Exception e) {
            System.out.println("Error Recuperable se esperaba mas simbolos en ultima fila");
        } 
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{        
        try {
            String lexema = s.value.toString();
            int fila = s.left;
            int columna = s.right;
            //this.clienteFrame.mostrarErrorSintactico("NO HAS CONTROLADO ESTE ERROR");
            //this.clienteFrame.setSeDebeEnviarElTexto(false);
        System.out.println("ERROR"+lexema+" "+fila+" "+columna);

        } catch (Exception e) {
            System.out.println("ERROR EN LA ESTRUCUTURA PRINCIPAL acciones");
        }
    }
/*
    private void iniciarSitioWeb(Object i,String tipo,int ileft,int iright){
  
    }


    private void iniciarPaginaWeb(Object i,String tipo,int ileft,int iright){

    }
*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= conjuntoDeElementos EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // conjuntoDeElementos ::= conjuntoDeElementos elemento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElementos",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // conjuntoDeElementos ::= elemento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeElementos",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // elemento ::= inicioSitioWeb parametros fin 
            {
              Object RESULT =null;
		
                SitioWeb nuevoSitio=new SitioWeb();
                nuevoSitio.darValoresCreacion(listaDeTokens);
                Run.listaDeSitiosWeb.add(nuevoSitio);
                listaDeTokens=new ArrayList<>();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // elemento ::= inicioPaginaWeb parametros fin 
            {
              Object RESULT =null;
		
                PaginaWeb nuevaPagina=new PaginaWeb();
                nuevaPagina.darValoresCreacion(listaDeTokens);
                Run.listaDePaginasWeb.add(nuevaPagina);
                listaDeTokens=new ArrayList<>();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elemento ::= inicioEtiquetas parametros etiquetas fin 
            {
              Object RESULT =null;
		
                String id =listaDeTokens.get(0).getLexema();
                Etiqueta nuevaEtiqueta = new Etiqueta(id.substring(1, id.length() - 1),listaDeEtiquetas);//lista de tokens posee el id
                Run.listaDeEtiquetas.add(nuevaEtiqueta);
                listaDeEtiquetas = new ArrayList<>();
                listaDeTokens=new ArrayList<>();
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // elemento ::= inicioComponente parametros atributos fin 
            {
              Object RESULT =null;
		
                Componente nuevoComponente=new Componente();
                nuevoComponente.darValoresCreacion(listaDeTokens);//Parametros
                nuevoComponente.darValoresCreacion(listaDeAtributos);//Atributos segun clase
                Run.listaDeComponentes.add(nuevoComponente);
                listaDeTokens=new ArrayList<>();
                listaDeAtributos=new ArrayList<>();
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fin ::= MENOR_QUE DIAGONAL ELEMENTO MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fin",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // inicioSitioWeb ::= MENOR_QUE ELEMENTO NOMBRE IGUAL COMILLA SITIO_WEB COMILLA MAYOR_QUE 
            {
              Object RESULT =null;
		System.out.println("SITIO WEB");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioSitioWeb",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // inicioPaginaWeb ::= MENOR_QUE ELEMENTO NOMBRE IGUAL COMILLA PAGINA_WEB COMILLA MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioPaginaWeb",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // inicioEtiquetas ::= MENOR_QUE ELEMENTO NOMBRE IGUAL COMILLA ETIQUETAS_DE_PAGINA COMILLA MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioEtiquetas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // inicioComponente ::= MENOR_QUE ELEMENTO NOMBRE IGUAL COMILLA COMPONENTE COMILLA MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicioComponente",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros ::= MENOR_QUE PARAMETROS MAYOR_QUE conjuntoDeParametros MENOR_QUE DIAGONAL PARAMETROS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // conjuntoDeParametros ::= conjuntoDeParametros unParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // conjuntoDeParametros ::= unParametro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeParametros",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA ID COMILLA MAYOR_QUE IDENTIFICADOR MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeTokens.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA USUARIO_CREACION COMILLA MAYOR_QUE IDENTIFICADOR MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeTokens.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA FECHA_CREACION COMILLA MAYOR_QUE FORMATO_FECHA MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeTokens.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA FECHA_MODIFICACION COMILLA MAYOR_QUE FORMATO_FECHA MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeTokens.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA USUARIO_MODIFICACION COMILLA MAYOR_QUE IDENTIFICADOR MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeTokens.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA TITULO_PARAMETRO COMILLA MAYOR_QUE ORACION MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeTokens.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA SITIO COMILLA MAYOR_QUE IDENTIFICADOR MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeTokens.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA PADRE COMILLA MAYOR_QUE IDENTIFICADOR MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeTokens.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA PAGINA COMILLA MAYOR_QUE IDENTIFICADOR MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeTokens.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // unParametro ::= MENOR_QUE PARAMETRO NOMBRE IGUAL COMILLA CLASE COMILLA MAYOR_QUE tipoDeClase MENOR_QUE DIAGONAL PARAMETRO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeTokens.add(new Token(i,t.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // unParametro ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unParametro",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoDeClase ::= TITULO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeClase",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoDeClase ::= PARRAFO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeClase",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoDeClase ::= IMAGEN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeClase",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipoDeClase ::= VIDEO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeClase",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoDeClase ::= MENU 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeClase",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // etiquetas ::= MENOR_QUE PARAM_ETIQUETAS MAYOR_QUE conjuntoDeEtiquetas MENOR_QUE DIAGONAL PARAM_ETIQUETAS MAYOR_QUE 
            {
              Object RESULT =null;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetas",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // conjuntoDeEtiquetas ::= conjuntoDeEtiquetas unaEtiqueta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeEtiquetas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // conjuntoDeEtiquetas ::= unaEtiqueta 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeEtiquetas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unaEtiqueta ::= MENOR_QUE ETIQUETA VALOR IGUAL IDENTIFICADOR DIAGONAL MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		listaDeEtiquetas.add(t.substring(1,t.length() - 1));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaEtiqueta",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // atributos ::= MENOR_QUE ATRIBUTOS MAYOR_QUE conjuntoDeAtributos MENOR_QUE DIAGONAL ATRIBUTOS MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("atributos",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // conjuntoDeAtributos ::= conjuntoDeAtributos unAtributo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeAtributos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // conjuntoDeAtributos ::= unAtributo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjuntoDeAtributos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unAtributo ::= MENOR_QUE ATRIBUTO NOMBRE IGUAL COMILLA TEXTO COMILLA MAYOR_QUE ORACION MENOR_QUE DIAGONAL ATRIBUTO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeAtributos.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unAtributo ::= MENOR_QUE ATRIBUTO NOMBRE IGUAL COMILLA ALINEACION COMILLA MAYOR_QUE tipoDeAlineacion MENOR_QUE DIAGONAL ATRIBUTO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeAtributos.add(new Token(i,t.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unAtributo ::= MENOR_QUE ATRIBUTO NOMBRE IGUAL COMILLA COLOR COMILLA MAYOR_QUE ORACION MENOR_QUE DIAGONAL ATRIBUTO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeAtributos.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unAtributo ::= MENOR_QUE ATRIBUTO NOMBRE IGUAL COMILLA ORIGEN COMILLA MAYOR_QUE URL MENOR_QUE DIAGONAL ATRIBUTO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeAtributos.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // unAtributo ::= MENOR_QUE ATRIBUTO NOMBRE IGUAL COMILLA ALTURA COMILLA MAYOR_QUE NUMERO MENOR_QUE DIAGONAL ATRIBUTO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeAtributos.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // unAtributo ::= MENOR_QUE ATRIBUTO NOMBRE IGUAL COMILLA ANCHO COMILLA MAYOR_QUE NUMERO MENOR_QUE DIAGONAL ATRIBUTO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeAtributos.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unAtributo ::= MENOR_QUE ATRIBUTO NOMBRE IGUAL COMILLA PADRE COMILLA MAYOR_QUE IDENTIFICADOR MENOR_QUE DIAGONAL ATRIBUTO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeAtributos.add(new Token(i,t));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unAtributo ::= MENOR_QUE ATRIBUTO NOMBRE IGUAL COMILLA ETIQUETAS COMILLA MAYOR_QUE etiquetasMenu MENOR_QUE DIAGONAL ATRIBUTO MAYOR_QUE 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		listaDeAtributos.add(new Token(i,t.toString()));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unAtributo ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("unAtributo",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // tipoDeAlineacion ::= CENTRAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeAlineacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tipoDeAlineacion ::= IZQUIERDA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeAlineacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tipoDeAlineacion ::= DERECHA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeAlineacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // tipoDeAlineacion ::= JUSTIFICAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=t;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoDeAlineacion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // etiquetasMenu ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetasMenu",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // etiquetasMenu ::= CONJUNTO_DE_ETIQUETAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("etiquetasMenu",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
