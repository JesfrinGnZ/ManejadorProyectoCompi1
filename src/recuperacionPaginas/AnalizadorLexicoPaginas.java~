/* The following code was generated by JFlex 1.7.0 */

//------------------>1era area<--------------------------    

package recuperacionPaginas;
import java_cup.runtime.*;
import static recuperacionPaginas.sym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>flexPaginas.flex</tt>
 */
public class AnalizadorLexicoPaginas implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\76\1\77\1\1\16\11\4\0\1\3\1\0"+
    "\1\63\1\0\1\10\10\0\1\6\1\75\1\64\1\4\11\5\1\72"+
    "\1\0\1\65\1\67\1\66\1\0\1\0\1\42\1\37\1\56\1\40"+
    "\1\36\1\52\1\43\1\60\1\32\1\62\1\74\1\46\1\53\1\44"+
    "\1\34\1\41\1\55\1\51\1\31\1\33\1\45\1\54\1\35\1\57"+
    "\1\74\1\61\1\47\1\0\1\50\1\0\1\7\1\0\1\23\1\20"+
    "\2\74\1\12\2\74\1\71\1\25\2\74\1\13\1\14\1\15\1\17"+
    "\1\22\1\26\1\21\1\24\1\16\1\27\1\30\4\74\1\0\1\70"+
    "\2\0\6\11\1\100\32\11\2\0\4\11\4\0\1\74\2\0\1\11"+
    "\7\0\1\74\4\0\1\74\5\0\27\74\1\0\37\74\1\0\u01ca\74"+
    "\4\0\14\74\16\0\5\74\7\0\1\74\1\0\1\74\21\0\165\74"+
    "\1\0\2\74\2\0\4\74\1\0\1\74\6\0\1\74\1\0\3\74"+
    "\1\0\1\74\1\0\24\74\1\0\123\74\1\0\213\74\1\0\5\74"+
    "\2\73\246\74\1\0\46\74\2\0\1\74\7\0\47\74\7\0\1\11"+
    "\1\0\55\74\1\0\1\74\1\0\2\74\1\0\2\74\1\0\1\74"+
    "\10\0\33\74\5\0\3\74\15\0\6\11\5\0\1\11\4\0\13\74"+
    "\1\0\1\11\3\0\112\74\4\0\146\74\1\0\10\74\1\11\1\0"+
    "\12\74\1\0\23\74\2\0\1\74\17\0\1\11\73\74\2\0\145\74"+
    "\16\0\66\74\4\0\1\74\5\0\56\74\22\0\34\74\104\0\25\74"+
    "\1\0\10\73\26\0\16\73\1\0\201\74\2\0\12\74\1\0\23\74"+
    "\1\0\10\74\2\0\2\74\2\0\26\74\1\0\7\74\1\0\1\74"+
    "\3\0\4\74\2\0\11\74\2\0\2\74\2\0\4\74\10\0\1\74"+
    "\4\0\2\74\1\0\5\74\2\0\14\74\2\11\7\0\1\11\5\0"+
    "\3\74\1\0\6\74\4\0\2\74\2\0\26\74\1\0\7\74\1\0"+
    "\2\74\1\0\2\74\1\0\2\74\2\0\1\74\1\0\5\74\4\0"+
    "\2\74\2\0\3\74\3\0\1\74\7\0\4\74\1\0\1\74\7\0"+
    "\20\74\13\0\3\74\1\0\11\74\1\0\3\74\1\0\26\74\1\0"+
    "\7\74\1\0\2\74\1\0\5\74\2\0\12\74\1\0\3\74\1\0"+
    "\3\74\2\0\1\74\17\0\4\74\2\0\12\74\1\0\1\11\7\0"+
    "\1\74\7\0\3\74\1\0\10\74\2\0\2\74\2\0\26\74\1\0"+
    "\7\74\1\0\2\74\1\0\5\74\2\0\11\74\2\0\2\74\2\0"+
    "\3\74\10\0\2\74\4\0\2\74\1\0\5\74\2\0\12\74\1\0"+
    "\1\74\20\0\2\74\1\0\6\74\3\0\3\74\1\0\4\74\3\0"+
    "\2\74\1\0\1\74\1\0\2\74\3\0\2\74\3\0\3\74\3\0"+
    "\14\74\4\0\5\74\3\0\3\74\1\0\4\74\2\0\1\74\6\0"+
    "\1\74\16\0\12\74\11\0\1\11\6\0\4\74\1\0\10\74\1\0"+
    "\3\74\1\0\27\74\1\0\20\74\3\0\10\74\1\0\3\74\1\0"+
    "\4\74\7\0\2\74\1\0\3\74\5\0\4\74\2\0\12\74\20\0"+
    "\1\73\3\74\1\0\10\74\1\0\3\74\1\0\27\74\1\0\12\74"+
    "\1\0\5\74\2\0\11\74\1\0\3\74\1\0\4\74\7\0\2\74"+
    "\7\0\1\74\1\0\4\74\2\0\12\74\1\0\2\74\16\0\3\74"+
    "\1\0\10\74\1\0\3\74\1\0\51\74\2\0\10\74\1\0\3\74"+
    "\1\0\5\74\5\0\3\73\1\74\7\0\5\74\2\0\12\74\12\0"+
    "\6\74\2\0\2\74\1\0\22\74\3\0\30\74\1\0\11\74\1\0"+
    "\1\74\2\0\7\74\3\0\1\74\4\0\6\74\1\0\1\74\1\0"+
    "\10\74\6\0\12\74\2\0\2\74\15\0\72\74\4\0\1\11\17\74"+
    "\1\0\12\74\47\0\2\74\1\0\1\74\2\0\2\74\1\0\1\74"+
    "\2\0\1\74\6\0\4\74\1\0\7\74\1\0\3\74\1\0\1\74"+
    "\1\0\1\74\2\0\2\74\1\0\15\74\1\0\3\74\2\0\5\74"+
    "\1\0\1\74\1\0\6\74\2\0\12\74\2\0\4\74\40\0\1\74"+
    "\27\0\2\74\6\0\12\74\13\0\1\74\1\0\1\74\1\0\1\74"+
    "\4\0\12\74\1\0\44\74\4\0\24\74\1\0\22\74\1\0\44\74"+
    "\11\0\1\74\71\0\112\74\6\0\116\74\2\0\46\74\1\0\1\74"+
    "\5\0\1\74\2\0\53\74\1\0\u014d\74\1\0\4\74\2\0\7\74"+
    "\1\0\1\74\1\0\4\74\2\0\51\74\1\0\4\74\2\0\41\74"+
    "\1\0\4\74\2\0\7\74\1\0\1\74\1\0\4\74\2\0\17\74"+
    "\1\0\71\74\1\0\4\74\2\0\103\74\2\0\3\74\40\0\20\74"+
    "\20\0\126\74\2\0\6\74\3\0\u026c\74\2\0\21\74\1\0\32\74"+
    "\5\0\113\74\3\0\13\74\7\0\15\74\1\0\7\74\13\0\25\74"+
    "\13\0\24\74\14\0\15\74\1\0\3\74\1\0\2\74\14\0\124\74"+
    "\3\0\1\74\3\0\1\11\2\74\2\0\12\74\41\0\3\74\1\11"+
    "\1\0\12\74\6\0\130\74\10\0\53\74\5\0\106\74\12\0\37\74"+
    "\1\0\14\74\4\0\14\74\12\0\50\74\2\0\5\74\13\0\54\74"+
    "\4\0\32\74\6\0\12\74\46\0\34\74\4\0\77\74\1\0\35\74"+
    "\2\0\13\74\6\0\12\74\15\0\1\74\10\0\16\74\1\73\101\0"+
    "\114\74\4\0\12\74\21\0\11\74\14\0\164\74\14\0\70\74\10\0"+
    "\12\74\3\0\61\74\2\0\11\73\107\0\3\74\1\0\43\74\1\0"+
    "\2\74\6\0\366\74\5\0\1\73\u011a\74\2\0\6\74\2\0\46\74"+
    "\2\0\6\74\2\0\10\74\1\0\1\74\1\0\1\74\1\0\1\74"+
    "\1\0\37\74\2\0\65\74\1\0\7\74\1\0\1\74\3\0\3\74"+
    "\1\0\7\74\3\0\4\74\2\0\6\74\4\0\15\74\5\0\3\74"+
    "\1\0\7\74\16\0\5\11\30\0\1\76\1\76\5\11\20\0\2\74"+
    "\23\0\1\74\13\0\5\11\1\0\12\11\1\0\1\74\15\0\1\74"+
    "\20\0\15\74\3\0\37\11\21\0\15\74\4\73\1\74\3\73\14\74"+
    "\21\0\1\74\4\0\1\74\2\0\12\74\1\0\1\74\3\0\5\74"+
    "\6\0\1\74\1\0\1\74\1\0\1\74\1\0\4\74\1\0\13\74"+
    "\2\0\4\74\5\0\5\74\4\0\1\74\21\0\51\74\u032d\0\64\73"+
    "\u0716\0\57\74\1\0\57\74\1\0\205\74\6\0\11\74\14\0\46\74"+
    "\1\0\1\74\5\0\1\74\2\0\70\74\7\0\1\74\17\0\30\74"+
    "\11\0\7\74\1\0\7\74\1\0\7\74\1\0\7\74\1\0\7\74"+
    "\1\0\7\74\1\0\7\74\1\0\7\74\1\0\40\74\57\0\1\74"+
    "\u01d5\0\3\74\31\0\17\74\1\0\5\74\2\0\5\74\4\0\126\74"+
    "\2\0\2\74\2\0\3\74\1\0\132\74\1\0\4\74\5\0\51\74"+
    "\3\0\136\74\21\0\33\74\65\0\20\74\u0200\0\u19b6\74\112\0\u51d6\74"+
    "\52\0\u048d\74\103\0\56\74\2\0\u010d\74\3\0\34\74\24\0\60\74"+
    "\3\73\1\0\12\74\1\0\163\74\45\0\11\74\2\0\147\74\2\0"+
    "\43\74\1\73\1\0\10\74\77\0\61\74\20\0\1\11\7\0\64\74"+
    "\14\0\105\74\1\73\12\0\12\74\6\0\30\74\3\0\1\74\1\0"+
    "\1\74\2\0\56\74\2\0\44\74\14\0\35\74\3\0\101\74\16\0"+
    "\13\74\6\0\37\74\1\0\67\74\11\0\16\74\2\0\12\74\6\0"+
    "\27\74\3\0\111\74\30\0\3\74\2\0\20\74\2\0\5\74\12\0"+
    "\6\74\2\0\6\74\2\0\6\74\11\0\7\74\1\0\7\74\1\0"+
    "\53\74\1\0\12\74\12\0\173\74\1\0\2\74\2\0\12\74\6\0"+
    "\u2ba4\74\14\0\27\74\4\0\61\74\u2104\0\u016e\74\2\0\152\74\46\0"+
    "\7\74\14\0\5\74\5\0\14\74\1\0\15\74\1\0\5\74\1\0"+
    "\1\74\1\0\2\74\1\0\2\74\1\0\154\74\41\0\u016b\74\22\0"+
    "\100\74\2\0\66\74\50\0\14\74\1\11\3\0\20\74\20\0\20\74"+
    "\3\0\2\74\30\0\3\74\31\0\1\11\6\0\5\74\1\0\207\74"+
    "\2\0\1\11\4\0\1\11\13\0\12\74\7\0\32\74\4\0\1\74"+
    "\1\0\32\74\13\0\131\74\3\0\6\74\2\0\6\74\2\0\6\74"+
    "\2\0\3\74\3\0\2\11\3\0\2\11\22\0\3\11\4\0\14\74"+
    "\1\0\32\74\1\0\23\74\1\0\2\74\1\0\17\74\2\0\16\74"+
    "\42\0\173\74\105\0\65\74\210\0\1\74\202\0\35\74\3\0\61\74"+
    "\17\0\1\74\37\0\40\74\20\0\33\74\5\0\53\74\5\0\36\74"+
    "\2\0\44\74\4\0\10\74\1\0\5\74\52\0\236\74\2\0\12\74"+
    "\6\0\44\73\4\0\44\73\4\0\50\74\10\0\64\74\234\0\u0137\74"+
    "\11\0\26\74\12\0\10\74\230\0\6\74\2\0\1\74\1\0\54\74"+
    "\1\0\2\74\3\0\1\74\2\0\27\74\12\0\27\74\11\0\37\74"+
    "\101\0\23\74\1\0\2\74\12\0\26\74\12\0\32\74\106\0\70\74"+
    "\6\0\2\74\100\0\4\74\1\0\2\74\5\0\10\74\1\0\3\74"+
    "\1\0\33\74\4\0\3\74\4\0\1\74\40\0\35\74\3\0\35\74"+
    "\43\0\10\74\1\0\36\74\31\0\66\74\12\0\26\74\12\0\23\74"+
    "\15\0\22\74\156\0\111\74\67\0\63\74\15\0\63\74\u030d\0\107\74"+
    "\37\0\12\74\17\0\74\74\2\0\1\11\22\0\31\74\7\0\12\74"+
    "\6\0\65\74\1\0\12\74\20\0\44\74\2\0\1\74\11\0\105\74"+
    "\5\0\3\74\3\0\13\74\1\0\1\74\43\0\22\74\1\0\45\74"+
    "\6\0\1\73\101\0\7\74\1\0\1\74\1\0\4\74\1\0\17\74"+
    "\1\0\12\74\7\0\73\74\5\0\12\74\6\0\4\74\1\0\10\74"+
    "\2\0\2\74\2\0\26\74\1\0\7\74\1\0\2\74\1\0\5\74"+
    "\2\0\11\74\2\0\2\74\2\0\3\74\2\0\1\74\6\0\1\74"+
    "\5\0\7\74\2\0\7\74\3\0\5\74\213\0\113\73\5\0\12\73"+
    "\46\0\106\74\1\0\1\74\10\0\12\74\246\0\66\74\2\0\11\74"+
    "\27\0\6\74\42\0\101\74\3\0\1\74\13\0\12\74\46\0\70\74"+
    "\10\0\12\74\66\0\32\74\3\0\17\74\4\0\12\74\u0166\0\112\74"+
    "\25\0\1\74\u01c0\0\71\74\u0107\0\11\73\1\0\55\73\1\0\11\73"+
    "\17\0\12\73\30\0\36\73\2\0\26\73\1\0\16\73\u0349\0\u039a\74"+
    "\146\0\157\74\21\0\304\74\u0abc\0\u042f\74\u0fd1\0\u0247\74\u21b9\0\u0239\74"+
    "\7\0\37\74\1\0\12\74\146\0\36\74\2\0\5\74\13\0\67\74"+
    "\11\0\4\74\14\0\12\74\11\0\25\74\5\0\23\74\u0370\0\105\74"+
    "\13\0\57\74\20\0\21\74\100\0\1\73\37\0\u17ed\73\23\0\u02f3\73"+
    "\u250d\0\2\74\u0bfe\0\153\74\5\0\15\74\3\0\11\74\7\0\12\74"+
    "\3\0\2\74\1\0\4\11\u14c1\0\5\74\3\0\6\74\10\11\10\74"+
    "\2\0\7\74\36\0\4\74\224\0\3\74\u01bb\0\125\74\1\0\107\74"+
    "\1\0\2\74\2\0\1\74\2\0\2\74\2\0\4\74\1\0\14\74"+
    "\1\0\1\74\1\0\7\74\1\0\101\74\1\0\4\74\2\0\10\74"+
    "\1\0\7\74\1\0\34\74\1\0\4\74\1\0\5\74\1\0\1\74"+
    "\3\0\7\74\1\0\u0154\74\2\0\31\74\1\0\31\74\1\0\37\74"+
    "\1\0\31\74\1\0\37\74\1\0\31\74\1\0\37\74\1\0\31\74"+
    "\1\0\37\74\1\0\31\74\1\0\10\74\2\0\62\74\u0200\0\67\74"+
    "\4\0\62\74\10\0\1\74\16\0\1\74\26\0\5\74\1\0\17\74"+
    "\u0550\0\7\73\1\0\21\73\2\0\7\73\1\0\2\73\1\0\5\73"+
    "\u07d5\0\305\74\13\0\7\74\51\0\113\73\5\0\12\73\u04a6\0\4\74"+
    "\1\0\33\74\1\0\2\74\1\0\1\74\2\0\1\74\1\0\12\74"+
    "\1\0\4\74\1\0\1\74\1\0\1\74\6\0\1\74\4\0\1\74"+
    "\1\0\1\74\1\0\1\74\1\0\3\74\1\0\2\74\1\0\1\74"+
    "\2\0\1\74\1\0\1\74\1\0\1\74\1\0\1\74\1\0\1\74"+
    "\1\0\2\74\1\0\1\74\2\0\4\74\1\0\7\74\1\0\4\74"+
    "\1\0\4\74\1\0\1\74\1\0\12\74\1\0\21\74\5\0\3\74"+
    "\1\0\5\74\1\0\21\74\u0274\0\32\73\6\0\32\73\6\0\32\73"+
    "\u0e76\0\ua6d7\74\51\0\u1035\74\13\0\336\74\2\0\u1682\74\u295e\0\u021e\74"+
    "\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\11\36\0\140\11\200\0\360\74\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\22\1\1\3\1\4\1\5\1\6"+
    "\1\7\7\0\1\10\21\0\1\11\34\0\1\12\43\0"+
    "\1\13\22\0\1\14\1\15\2\0\1\16\3\0\1\17"+
    "\1\0\1\20\15\0\1\21\2\0\1\22\3\0\1\23"+
    "\4\0\1\24\1\25\2\0\1\26\1\0\1\27\7\0"+
    "\1\30\16\0\1\31\4\0\1\32\3\0\1\33\4\0"+
    "\1\34\1\0\1\35\1\36\1\0\1\37\7\0\1\40"+
    "\1\41\6\0\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\5\0\1\50\5\0\1\51\1\0\1\52\1\53\6\0"+
    "\1\54\1\55\12\0\1\56\1\57\14\0\1\60\6\0"+
    "\1\61\6\0\1\62\1\63\1\0\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\101\0\303\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\101\0\101"+
    "\0\101\0\101\0\101\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659"+
    "\0\u069a\0\u06db\0\101\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820"+
    "\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28"+
    "\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\101\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff"+
    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\101\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce"+
    "\0\u140f\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6"+
    "\0\u1617\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de"+
    "\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6"+
    "\0\u1a27\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\101\0\u1b6c\0\u1bad"+
    "\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5"+
    "\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd"+
    "\0\101\0\u1ffe\0\u203f\0\u2080\0\101\0\u20c1\0\u2102\0\u2143"+
    "\0\101\0\u2184\0\101\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1"+
    "\0\101\0\u2512\0\u2553\0\101\0\u2594\0\u25d5\0\u2616\0\101"+
    "\0\u2657\0\u2698\0\u26d9\0\u271a\0\101\0\101\0\u275b\0\u279c"+
    "\0\u27dd\0\u281e\0\101\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963"+
    "\0\u29a4\0\u29e5\0\101\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a"+
    "\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32"+
    "\0\u2d73\0\101\0\u2db4\0\u2df5\0\u2e36\0\u2e77\0\101\0\u2eb8"+
    "\0\u2ef9\0\u2f3a\0\101\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\101"+
    "\0\u307f\0\101\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u3205"+
    "\0\u3246\0\u3287\0\u32c8\0\u3309\0\101\0\101\0\u334a\0\u338b"+
    "\0\u33cc\0\u340d\0\u344e\0\u348f\0\101\0\u34d0\0\101\0\101"+
    "\0\101\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\101"+
    "\0\u3697\0\u36d8\0\u3719\0\u375a\0\u379b\0\101\0\u37dc\0\101"+
    "\0\101\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921\0\u3962\0\101"+
    "\0\101\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29"+
    "\0\u3b6a\0\u3bab\0\u3bec\0\101\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0"+
    "\0\u3d31\0\u3d72\0\u3c2d\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7"+
    "\0\u3ef8\0\101\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e"+
    "\0\101\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\101"+
    "\0\101\0\u4245\0\101";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\6\2\1\5\2\2\1\6\4\2"+
    "\1\7\1\10\4\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\2\1\16\1\2\1\17\1\20\1\21\2\2\1\22"+
    "\1\2\1\23\2\2\1\24\3\2\1\25\3\2\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\7\2\1\4\1\2"+
    "\103\0\1\4\111\0\1\34\2\0\1\35\101\0\1\36"+
    "\104\0\1\37\73\0\1\40\105\0\1\41\107\0\1\42"+
    "\106\0\1\43\20\0\1\44\51\0\1\45\3\0\1\46"+
    "\113\0\1\47\62\0\1\50\103\0\1\51\104\0\1\52"+
    "\102\0\1\53\1\0\1\54\63\0\1\55\47\0\4\56"+
    "\1\57\1\60\3\61\21\56\1\62\1\63\5\56\1\64"+
    "\6\56\1\65\2\56\1\66\1\67\14\56\1\70\7\56"+
    "\36\0\1\71\76\0\1\72\1\0\1\73\7\0\1\74"+
    "\77\0\1\75\45\0\1\76\113\0\1\77\67\0\1\100"+
    "\105\0\1\101\100\0\1\102\72\0\1\103\120\0\1\104"+
    "\122\0\1\105\56\0\1\106\124\0\1\107\53\0\1\110"+
    "\100\0\1\111\117\0\1\112\67\0\1\113\2\0\1\114"+
    "\113\0\1\115\54\0\1\116\1\117\112\0\1\120\33\0"+
    "\50\56\1\65\34\56\2\121\42\56\1\122\34\56\2\123"+
    "\42\56\1\122\34\56\43\124\1\56\1\65\12\124\6\56"+
    "\1\124\2\56\1\124\3\56\1\124\50\56\1\65\2\56"+
    "\1\125\57\56\1\126\15\56\1\65\72\56\1\127\5\56"+
    "\1\65\66\56\1\130\11\56\1\65\62\56\1\131\15\56"+
    "\1\65\46\56\1\132\31\56\1\65\30\56\56\0\1\133"+
    "\70\0\1\134\4\0\1\135\71\0\1\136\76\0\1\137"+
    "\67\0\1\140\63\0\1\141\112\0\1\142\72\0\1\143"+
    "\103\0\1\144\102\0\1\145\72\0\1\146\113\0\1\147"+
    "\113\0\1\150\100\0\1\151\66\0\1\152\110\0\1\153"+
    "\112\0\1\154\61\0\1\155\113\0\1\156\61\0\1\157"+
    "\126\0\1\160\64\0\1\161\101\0\1\162\75\0\1\163"+
    "\36\0\4\56\2\164\42\56\1\65\34\56\2\165\42\56"+
    "\1\122\34\56\43\124\1\56\1\166\12\124\5\56\1\167"+
    "\1\124\2\56\1\124\3\56\1\124\42\56\1\170\5\56"+
    "\1\65\63\56\1\171\14\56\1\65\100\56\1\65\1\172"+
    "\73\56\1\173\3\56\1\65\70\56\1\174\7\56\1\65"+
    "\46\56\1\175\31\56\1\65\30\56\60\0\1\176\54\0"+
    "\1\177\105\0\1\200\72\0\1\201\76\0\1\202\102\0"+
    "\1\203\57\0\1\204\115\0\1\205\72\0\1\206\73\0"+
    "\1\207\104\0\1\210\101\0\1\211\113\0\1\212\76\0"+
    "\1\213\114\0\1\214\66\0\1\215\102\0\1\216\107\0"+
    "\1\217\111\0\1\220\60\0\1\221\106\0\1\222\70\0"+
    "\1\223\102\0\1\224\113\0\1\225\100\0\1\226\27\0"+
    "\4\56\2\227\42\56\1\65\34\56\2\230\42\56\1\122"+
    "\36\56\3\231\37\56\1\65\73\56\1\232\4\56\1\65"+
    "\75\56\1\233\2\56\1\65\100\56\1\65\1\234\74\56"+
    "\1\235\2\56\1\65\66\56\1\236\11\56\1\65\52\56"+
    "\1\237\25\56\1\65\30\56\42\0\1\240\107\0\1\241"+
    "\63\0\1\242\115\0\1\243\65\0\1\244\74\0\1\245"+
    "\63\0\1\246\75\0\1\247\100\0\1\250\100\0\1\251"+
    "\115\0\1\252\60\0\1\253\127\0\1\254\76\0\1\255"+
    "\110\0\1\256\72\0\1\257\122\0\1\260\62\0\1\261"+
    "\100\0\1\262\100\0\1\263\70\0\1\264\46\0\6\56"+
    "\1\265\41\56\1\65\34\56\2\266\1\265\41\56\1\122"+
    "\34\56\43\267\1\56\1\65\12\267\6\56\1\267\2\56"+
    "\1\267\3\56\1\267\36\56\1\270\11\56\1\65\76\56"+
    "\1\271\1\56\1\65\72\56\1\272\5\56\1\65\100\56"+
    "\1\273\64\56\1\274\13\56\1\65\54\56\1\275\23\56"+
    "\1\65\21\56\1\276\6\56\7\0\1\277\135\0\1\300"+
    "\76\0\1\301\110\0\1\302\44\0\1\303\100\0\1\304"+
    "\100\0\1\305\100\0\1\306\117\0\1\307\114\0\1\310"+
    "\62\0\1\311\107\0\1\312\45\0\1\313\147\0\1\314"+
    "\56\0\1\315\44\0\4\56\2\316\42\56\1\65\34\56"+
    "\2\266\42\56\1\122\34\56\43\267\1\56\1\317\12\267"+
    "\5\56\1\167\1\267\2\56\1\267\3\56\1\267\44\56"+
    "\1\320\3\56\1\65\64\56\1\321\13\56\1\65\100\56"+
    "\1\65\1\56\1\322\76\56\1\323\100\56\1\65\21\56"+
    "\1\276\56\56\1\65\13\56\1\324\14\56\53\0\1\325"+
    "\2\0\1\326\60\0\1\327\113\0\1\330\61\0\1\331"+
    "\65\0\1\332\104\0\1\333\76\0\1\334\76\0\1\335"+
    "\117\0\1\336\102\0\1\337\102\0\1\340\73\0\1\341"+
    "\75\0\1\342\55\0\1\343\71\0\4\56\2\344\42\56"+
    "\1\65\100\56\1\345\100\56\1\346\64\56\1\347\13\56"+
    "\1\65\100\56\1\65\13\56\1\350\14\56\34\0\1\351"+
    "\115\0\1\352\73\0\1\353\112\0\1\354\46\0\1\355"+
    "\73\0\1\356\105\0\1\357\113\0\1\360\103\0\1\361"+
    "\67\0\1\362\105\0\1\363\76\0\1\364\117\0\1\365"+
    "\2\0\1\366\22\0\6\56\1\367\41\56\1\65\100\56"+
    "\1\370\34\56\4\371\2\56\35\371\1\56\1\65\12\371"+
    "\6\56\1\371\1\56\2\371\4\56\40\0\1\372\76\0"+
    "\1\373\75\0\1\374\107\0\1\375\62\0\1\376\63\0"+
    "\1\377\130\0\1\u0100\105\0\1\u0101\70\0\1\u0102\115\0"+
    "\1\u0103\27\0\4\56\2\u0104\42\56\1\65\34\56\4\371"+
    "\2\56\35\371\1\56\1\65\12\371\6\56\1\371\1\56"+
    "\2\371\1\u0105\3\56\32\0\1\u0106\110\0\1\u0107\74\0"+
    "\1\u0108\113\0\1\u0109\67\0\1\u010a\100\0\1\u010b\76\0"+
    "\1\u010c\42\0\4\56\2\u010d\42\56\1\65\34\56\4\u010e"+
    "\2\56\35\u010e\1\56\1\65\12\u010e\6\56\1\u010e\1\56"+
    "\2\u010e\4\56\52\0\1\u010f\104\0\1\u0110\60\0\1\u0111"+
    "\74\0\1\u0112\110\0\1\u0113\36\0\50\56\1\u0114\30\56"+
    "\1\u010e\2\56\45\u010e\1\u0115\25\u010e\3\56\32\0\1\u0116"+
    "\100\0\1\u0117\55\0\1\u0118\143\0\1\u0119\104\0\1\u011a"+
    "\22\0\1\u011b\2\0\45\u011b\1\u0115\25\u011b\61\0\1\u011c"+
    "\56\0\1\u011d\105\0\1\u011e\71\0\1\u011f\100\0\1\u0120"+
    "\110\0\1\u0121\102\0\1\u0122\76\0\1\u0123\114\0\1\u0124"+
    "\56\0\1\u0125\122\0\1\u0126\65\0\1\u0127\77\0\1\u0128"+
    "\102\0\1\u0129\66\0\1\u012a\100\0\1\u012b\124\0\1\u012c"+
    "\56\0\1\u012d\110\0\1\u012e\66\0\1\u012f\112\0\1\u0130"+
    "\76\0\1\u0131\72\0\1\u0132\110\0\1\u0133\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17030];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\22\1\5\11\7\0\1\11"+
    "\21\0\1\11\34\0\1\11\43\0\1\11\22\0\1\11"+
    "\1\1\2\0\1\11\3\0\1\11\1\0\1\11\15\0"+
    "\1\11\2\0\1\11\3\0\1\11\4\0\2\11\2\0"+
    "\1\1\1\0\1\11\7\0\1\11\16\0\1\11\4\0"+
    "\1\11\3\0\1\11\4\0\1\11\1\0\1\11\1\1"+
    "\1\0\1\1\7\0\2\11\6\0\1\11\1\1\3\11"+
    "\1\1\5\0\1\11\5\0\1\11\1\0\2\11\6\0"+
    "\2\11\12\0\1\11\1\1\14\0\1\11\6\0\1\11"+
    "\6\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[307];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoPaginas(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3040) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /*Ignoramos*/System.out.println("Error:"+yytext());
            } 
            // fall through
          case 53: break;
          case 2: 
            { /*IGNORAMOS*/
            } 
            // fall through
          case 54: break;
          case 3: 
            { return symbol(COMILLA,yytext());
            } 
            // fall through
          case 55: break;
          case 4: 
            { return symbol(DIAGONAL,yytext());
            } 
            // fall through
          case 56: break;
          case 5: 
            { return symbol(MENOR_QUE,yytext());
            } 
            // fall through
          case 57: break;
          case 6: 
            { return symbol(MAYOR_QUE,yytext());
            } 
            // fall through
          case 58: break;
          case 7: 
            { return symbol(IGUAL,yytext());
            } 
            // fall through
          case 59: break;
          case 8: 
            { return symbol(ID,yytext());
            } 
            // fall through
          case 60: break;
          case 9: 
            { return symbol(ORACION,yytext());
            } 
            // fall through
          case 61: break;
          case 10: 
            { return symbol(NUMERO,yytext());
            } 
            // fall through
          case 62: break;
          case 11: 
            { System.out.println("Id"+yytext());return symbol(IDENTIFICADOR,yytext());
            } 
            // fall through
          case 63: break;
          case 12: 
            { return symbol(VALOR,yytext());
            } 
            // fall through
          case 64: break;
          case 13: 
            { return symbol(SITIO,yytext());
            } 
            // fall through
          case 65: break;
          case 14: 
            { return symbol(TEXTO,yytext());
            } 
            // fall through
          case 66: break;
          case 15: 
            { return symbol(PADRE,yytext());
            } 
            // fall through
          case 67: break;
          case 16: 
            { return symbol(ANCHO,yytext());
            } 
            // fall through
          case 68: break;
          case 17: 
            { return symbol(COLOR,yytext());
            } 
            // fall through
          case 69: break;
          case 18: 
            { return symbol(CLASE,yytext());
            } 
            // fall through
          case 70: break;
          case 19: 
            { return symbol(NOMBRE,yytext());
            } 
            // fall through
          case 71: break;
          case 20: 
            { return symbol(TITULO_PARAMETRO,yytext());
            } 
            // fall through
          case 72: break;
          case 21: 
            { return symbol(ORIGEN,yytext());
            } 
            // fall through
          case 73: break;
          case 22: 
            { return symbol(PAGINA,yytext());
            } 
            // fall through
          case 74: break;
          case 23: 
            { return symbol(ALTURA,yytext());
            } 
            // fall through
          case 75: break;
          case 24: 
            { return symbol(MENU,yytext());
            } 
            // fall through
          case 76: break;
          case 25: 
            { return symbol(DERECHA,yytext());
            } 
            // fall through
          case 77: break;
          case 26: 
            { System.out.println("ConjuntoDeEtiquetas:"+yytext());return symbol(CONJUNTO_DE_ETIQUETAS,yytext());
            } 
            // fall through
          case 78: break;
          case 27: 
            { return symbol(VIDEO,yytext());
            } 
            // fall through
          case 79: break;
          case 28: 
            { return symbol(CENTRAR,yytext());
            } 
            // fall through
          case 80: break;
          case 29: 
            { return symbol(ELEMENTO,yytext());
            } 
            // fall through
          case 81: break;
          case 30: 
            { return symbol(ETIQUETA,yytext());
            } 
            // fall through
          case 82: break;
          case 31: 
            { return symbol(ATRIBUTO,yytext());
            } 
            // fall through
          case 83: break;
          case 32: 
            { return symbol(IMAGEN,yytext());
            } 
            // fall through
          case 84: break;
          case 33: 
            { return symbol(TITULO,yytext());
            } 
            // fall through
          case 85: break;
          case 34: 
            { return symbol(PARAM_ETIQUETAS,yytext());
            } 
            // fall through
          case 86: break;
          case 35: 
            { return symbol(PARAMETRO,yytext());
            } 
            // fall through
          case 87: break;
          case 36: 
            { return symbol(ATRIBUTOS,yytext());
            } 
            // fall through
          case 88: break;
          case 37: 
            { return symbol(SITIO_WEB,yytext());
            } 
            // fall through
          case 89: break;
          case 38: 
            { return symbol(IZQUIERDA,yytext());
            } 
            // fall through
          case 90: break;
          case 39: 
            { return symbol(ETIQUETAS,yytext());
            } 
            // fall through
          case 91: break;
          case 40: 
            { return symbol(PARRAFO,yytext());
            } 
            // fall through
          case 92: break;
          case 41: 
            { return symbol(PARAMETROS,yytext());
            } 
            // fall through
          case 93: break;
          case 42: 
            { return symbol(PAGINA_WEB,yytext());
            } 
            // fall through
          case 94: break;
          case 43: 
            { return symbol(ALINEACION,yytext());
            } 
            // fall through
          case 95: break;
          case 44: 
            { return symbol(COMPONENTE,yytext());
            } 
            // fall through
          case 96: break;
          case 45: 
            { return symbol(JUSTIFICAR,yytext());
            } 
            // fall through
          case 97: break;
          case 46: 
            { return symbol(FORMATO_FECHA,yytext());
            } 
            // fall through
          case 98: break;
          case 47: 
            { System.out.println("URL"+yytext());return symbol(URL,yytext());
            } 
            // fall through
          case 99: break;
          case 48: 
            { return symbol(FECHA_CREACION,yytext());
            } 
            // fall through
          case 100: break;
          case 49: 
            { return symbol(USUARIO_CREACION,yytext());
            } 
            // fall through
          case 101: break;
          case 50: 
            { return symbol(FECHA_MODIFICACION,yytext());
            } 
            // fall through
          case 102: break;
          case 51: 
            { return symbol(ETIQUETAS_DE_PAGINA,yytext());
            } 
            // fall through
          case 103: break;
          case 52: 
            { return symbol(USUARIO_MODIFICACION,yytext());
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorLexicoPaginas [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        AnalizadorLexicoPaginas scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new AnalizadorLexicoPaginas(reader);
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
